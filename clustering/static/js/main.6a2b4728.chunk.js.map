{"version":3,"sources":["App/context.ts","styles/colors.ts","components/Polygon.tsx","components/Button.tsx","styles/animations.ts","styles/theme.ts","components/BaseStyles.tsx","components/ImageButton.tsx","components/BasePage.tsx","pages/Cover.tsx","components/ButtonGroup.tsx","App/datas.ts","components/Basket.tsx","components/CenterBasket.tsx","components/DndBoard.tsx","components/HelpBox.tsx","pages/DragAndDrop.tsx","components/Container.tsx","components/ContentTitle.tsx","pages/Survey.tsx","components/ChatUI.tsx","components/PointText.ts","components/ReadOnlyBasket.tsx","pages/CompareBySize.tsx","pages/CompareByColor.tsx","pages/CompareByShape.tsx","assets/images/dice.gif","pages/General.tsx","assets/images/dimension.gif","pages/ExperienceDone.tsx","pages/ResultCompare.tsx","assets/images/book_robot.png","pages/FindOut.tsx","assets/images/crowd.gif","pages/WhatIs.tsx","assets/images/messy.gif","assets/images/chat_robot.png","assets/images/chat_bini.png","assets/sounds/messenger.mp3","pages/Purpose.tsx","assets/sounds/k_means_video.mp4","pages/Understanding.tsx","components/EtcStyles.tsx","pages/UseCase1.tsx","assets/images/graph_all.png","pages/UseCase2.tsx","assets/images/smile.gif","pages/UnderstandingComplete.tsx","pages/AnalyticsProgress1.tsx","pages/AnalyticsProgress2.tsx","pages/AnalyticsResult.tsx","pages/MyAnalyticsResult.tsx","App/index.tsx","reportWebVitals.ts","styles/globalStyles.ts","index.tsx"],"names":["GroupType","centerBasketSize","basketSize","ColorType","defaultState","page","groups","Center","Array","from","keys","Group1","Group2","Group3","Group4","AppContext","createContext","state","setState","goToHome","goToPrev","goToNext","closeTab","moveGroup","PolygonType","PolygonSizeType","ItemTypes","palette","Blue","LightGray","MidGray","Yellow","Pink","Purple","Green","colorStyles","css","theme","color","selected","lighten","darken","props","outline","sizes","xxlarge","height","fontSize","xlarge","large","medium","small","paddings","longWidth","padding","sizeStyles","size","paddingStyles","fullWidthStyle","fullWidth","StyledButton","styled","button","Button","children","rest","Bounce","keyframes","Opacity","FromRight","defaultTheme","PointText","span","blue","Container","div","Title","SubTitle","BounceButton","DivBase","ContentTitle","Content","ExplainBox","Img","img","FlexDiv","ConversationBox","Lg","lightGray","Mg","midGray","ImgBtn","ButtonTopLeft","ButtonTopRight","Origin","BasePage","cover","useContext","isClosableTab","window","opener","ImageButton","onClick","Cover","Div","ButtonGroup","isOpenNextPage","callbackNext","lastPage","buttonText","setTimeout","disabled","isDragging","canDrag","showBorder","polygonMap","Map","Circle","BsFillCircleFill","Square","BsFillSquareFill","Diamond","BsFillDiamondFill","Star","BsFillStarFill","Polygon","id","type","Icon","get","useDrag","PolygonItem","item","polygonId","collect","monitor","drag","pickColor","ThemeContext","ref","clusters","polygons","S","cluster","M","L","groupBy","data","field","reduce","prev","current","polygonsGroupByCluster","polygonsGroupBySize","polygonsGroupByColor","polygonsGroupByType","pointViews","title","getScores","map","group","index","groupScores","length","getMaxLengthArray","Object","values","by","pointSum","polygonIds","score","Number","isNaN","scores","GridContainer","Grid","Block","Overlay","colorType","Basket","groupType","useState","isFull","setFull","useEffect","useDrop","accept","canDrop","drop","isOver","polygon","undefined","key","CenterBasket","HTML5toTouch","backends","backend","HTML5Backend","transition","MouseTransition","TouchBackend","options","enableMouseEvents","preview","TouchTransition","NameDiv","DndBoard","style","position","top","left","right","bottom","HelpBox","content","TopSection","Explain","DragAndDrop","isEmptyCenter","isExistNotAllowedGroup","includes","isFullCenter","marginTop","centerArr","sort","Math","random","newGroups","pickedGroupIdx","floor","splice","prevState","dotenv","config","MessageStatus","PRIVATE_KEY","process","replace","doc","GoogleSpreadsheet","appendSpreadsheet","row","a","useServiceAccountAuth","client_email","private_key","loadInfo","sheet","sheetsById","now","Date","addRow","date","moment","format","console","error","ageOptions","ratingOptions","value","icon","defaultValues","age","rating","List","Subtitle","h3","Wrapper","CustomDivBase","Option","AgeOption","active","RatingOption","useStyles","makeStyles","cookieAlert","Survey","open","setOpen","classes","option","width","borderRadius","margin","marginBottom","background","Snackbar","onClose","event","reason","Alert","className","severity","variant","ReadOnlyBasket","showBorders","GridByTwoColumn","CompareContainer","CompareBySize","groupsResultByComputer","entries","groupsResultByMe","filter","toString","CompareByColor","CompareByShape","General","src","DiceImg","alt","ExperienceDone","DimensionImg","StyledContent","OverlayWrapper","MiddleOverlayBadge","ResultCompare","validGroups","slice","myScores","toFixed","ButtonDiv","ImgDiv","Compare1","backgroundColor","BookRobot","WhatIs","CrowdImg","audio","Audio","messenger","AvatarWrapper","Avatar","ChatMessage","ChatBubbleContainer","isFirstPersonView","status","HIDE","APPREARING","SHOW","switchMessageStatus","messageStatus","ChatBubble","imgSrc","text","ChatUIContainer","backgroundImgSrc","ChatUI","users","messages","animation","setOpenNextPage","animationStep","setAnimationStep","play","step","meUserId","find","user","userId","userMap","message","ChatBot","Purpose","MessyImg","ChatBini","Understanding","display","justifyContent","alignItems","loop","autoPlay","controls","KmeansVideo","kind","label","ColorBox","Flex","GroupDiv","GroupTitle","bgColor","InBoxTitle","InBoxContent","FlexBothCenter","Datas","title1","title2","UseCase1","flexDirection","UseCase2","Graph1","marginLeft","UnderstandingComplete","SmileImg","Question","AnalyticsProgress","pointView","Txt","Highlighting","maxLengthPolygonIds","textAlign","AnalyticsResult","totalScore","scoreInfo","Pill","MyAnalyticsResult","groupId","myScore","firstOfTargetGroupByField","pages","AnalyticsProgress1","AnalyticsProgress2","FindOut","navigator","onLine","maxStage","App","handleGoToPage","addValue","newStage","onContextMenu","e","preventDefault","Provider","close","to","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a2b4728.chunk.js","sourcesContent":["import React, { createContext } from 'react';\n\nexport const basketSize = 12;\nexport const centerBasketSize = basketSize * 2;\n\nexport enum GroupType {\n  Center,\n  Group1,\n  Group2,\n  Group3,\n  Group4,\n}\n\nexport type StateType = {\n  page: number;\n  groups: Record<GroupType, number[]>;\n};\n\nexport type AppContextProps = {\n  state: StateType;\n  setState: React.Dispatch<React.SetStateAction<StateType>>;\n  goToHome: () => void;\n  goToPrev: () => void;\n  goToNext: () => void;\n  closeTab: () => void;\n  moveGroup: (id: number, from: number, to: number) => void;\n};\n\nexport const minPage = 0;\nexport const defaultState = {\n  page: minPage,\n  groups: {\n    [GroupType.Center]: [...Array.from(Array(centerBasketSize).keys())],\n    [GroupType.Group1]: [],\n    [GroupType.Group2]: [],\n    [GroupType.Group3]: [],\n    [GroupType.Group4]: [],\n  },\n};\n\nconst AppContext = createContext<AppContextProps>({\n  state: defaultState,\n  setState: () => {},\n  goToHome: () => {},\n  goToPrev: () => {},\n  goToNext: () => {},\n  closeTab: () => {},\n  moveGroup: () => {},\n});\n\nexport default AppContext;\n","export enum ColorType {\n  Blue = 'blue',\n  LightGray = 'lightGray',\n  MidGray = 'midGray',\n  Yellow = 'yellow',\n  Pink = 'pink',\n  Purple = 'purple',\n  Green = 'green',\n}\n\nexport const palette = {\n  [ColorType.Blue]: '#1696e5',\n  [ColorType.LightGray]: '#f2f2f2',\n  [ColorType.MidGray]: '#d9d9d9',\n  [ColorType.Yellow]: '#F4DE38',\n  [ColorType.Pink]: '#EF4875',\n  [ColorType.Purple]: '#8E94FF',\n  [ColorType.Green]: '#46BF83',\n};\n","import React, { useContext } from 'react';\nimport { useDrag } from 'react-dnd';\nimport styled, { css, ThemeContext } from 'styled-components';\nimport {\n  BsFillCircleFill,\n  BsFillSquareFill,\n  BsFillDiamondFill,\n  BsFillStarFill,\n} from 'react-icons/bs';\nimport { lighten } from '@material-ui/core';\nimport { Theme } from 'styles/theme';\nimport { ColorType } from 'styles/colors';\nimport { GroupType } from 'App/context';\n\ntype ContainerProps = {\n  size: number;\n  color: string;\n  isDragging: boolean;\n  canDrag: boolean;\n  showBorder: boolean;\n};\nconst Container = styled.div<ContainerProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 3vw;\n  height: 3vw;\n\n  ${({ theme, size, color, isDragging, canDrag, showBorder }) => css`\n    opacity: ${isDragging ? 0.5 : 1};\n\n    svg {\n      font-size: 0.9vw;\n      transform: scale(${size});\n      fill: ${color};\n    }\n\n    ${showBorder &&\n    css`\n      border: 2px solid ${(theme as Theme).palette[ColorType.Blue]};\n    `}\n\n    ${canDrag &&\n    css`\n      cursor: pointer;\n      background: #fff;\n      border-radius: 0.5rem;\n      &:hover {\n        svg {\n          fill: ${lighten(color, 0.4)};\n        }\n      }\n    `}\n  `}\n`;\n\nexport enum PolygonType {\n  Circle,\n  Square,\n  Diamond,\n  Star,\n}\n\nexport enum PolygonSizeType {\n  S = 1,\n  M,\n  L,\n}\n\nexport enum ItemTypes {\n  PolygonItem = 'polygonItem',\n}\n\nexport type PolygonProps = {\n  id: number;\n  from?: GroupType;\n  type: PolygonType;\n  size: PolygonSizeType;\n  color: ColorType;\n  canDrag?: boolean;\n  showBorder?: boolean;\n};\n\nexport const polygonMap = new Map([\n  [PolygonType.Circle, BsFillCircleFill],\n  [PolygonType.Square, BsFillSquareFill],\n  [PolygonType.Diamond, BsFillDiamondFill],\n  [PolygonType.Star, BsFillStarFill],\n]);\n\nconst Polygon: React.FC<PolygonProps> = ({\n  id,\n  from,\n  type,\n  size,\n  color,\n  canDrag = true,\n  showBorder = false,\n}) => {\n  const Icon = polygonMap.get(type);\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: ItemTypes.PolygonItem,\n    item: { from, polygonId: id },\n    canDrag,\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n  const { palette } = useContext<Theme>(ThemeContext);\n  const pickColor = palette[color];\n\n  if (!Icon) {\n    return null;\n  }\n\n  return (\n    <Container\n      ref={drag}\n      isDragging={isDragging}\n      size={size}\n      color={pickColor}\n      canDrag={canDrag}\n      showBorder={showBorder}\n    >\n      <Icon />\n    </Container>\n  );\n};\n\nexport default Polygon;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { darken, lighten } from 'polished';\nimport { Theme } from '../styles/theme';\nimport { ColorType } from '../styles/colors';\n\ntype SizeType = 'xxlarge' | 'xlarge' | 'large' | 'medium' | 'small';\ntype PaddingType = 'longWidth' | 'large' | 'medium';\ntype StyledButtonProps = {\n  theme: Theme;\n  color: ColorType;\n  size: SizeType;\n  padding: PaddingType;\n  fullWidth: boolean;\n  outline: boolean;\n};\n\nconst colorStyles = css`\n  ${({ theme, color }: StyledButtonProps) => {\n    const selected = theme.palette[color];\n    return css`\n      background: ${selected};\n      &:hover {\n        background: ${lighten(0.1, selected)};\n      }\n      &:active {\n        background: ${darken(0.1, selected)};\n      }\n      &:disabled {\n        background: ${lighten(0.4, selected)};\n        cursor: not-allowed;\n      }\n      ${(props: StyledButtonProps) =>\n        props.outline &&\n        css`\n          color: ${selected};\n          background: none;\n          border: 1px solid ${selected};\n          &:hover {\n            background: ${selected};\n            color: white;\n          }\n          &:active {\n            background: ${darken(0.1, selected)};\n          }\n        `}\n    `;\n  }}\n`;\n\nconst sizes = {\n  xxlarge: {\n    height: '3.75rem',\n    fontSize: '3rem',\n  },\n  xlarge: {\n    height: '3.5rem',\n    fontSize: '2rem',\n  },\n  large: {\n    height: '3rem',\n    fontSize: '1.25rem',\n  },\n  medium: {\n    height: '2.25rem',\n    fontSize: '1rem',\n  },\n  small: {\n    height: '1.75rem',\n    fontSize: '0.875rem',\n  },\n};\nconst paddings = {\n  longWidth: {\n    padding: '1.5rem 4rem',\n  },\n  medium: {\n    padding: '1rem',\n  },\n  large: {\n    padding: '3rem 4rem',\n  },\n};\n\nconst sizeStyles = css`\n  ${({ size }: StyledButtonProps) =>\n    css`\n      height: ${sizes[size].height};\n      font-size: ${sizes[size].fontSize};\n    `}\n`;\n\nconst paddingStyles = css`\n  ${({ padding }: StyledButtonProps) =>\n    css`\n      padding: ${paddings[padding].padding};\n    `}\n`;\n\nconst fullWidthStyle = css`\n  ${(props: StyledButtonProps) =>\n    props.fullWidth &&\n    css`\n      width: 100%;\n      justify-content: center;\n      &:not(:first-child) {\n        margin-left: 0;\n        margin-top: 1rem;\n      }\n    `}\n`;\n\nconst StyledButton = styled.button<StyledButtonProps>`\n  /* common style */\n  display: inline-flex;\n  outline: none;\n  border: none;\n  border-radius: 4px;\n  color: white;\n  cursor: pointer;\n  align-items: center;\n  font-family: 'Yspot';\n  /* etc */\n  &:not(:first-child) {\n    margin-left: 1rem;\n  }\n\n  /* size */\n  ${sizeStyles}\n\n  /* color */\n  ${colorStyles}\n\n  /* width */\n  ${fullWidthStyle}\n\n  /* padding */\n  ${paddingStyles}\n`;\n\ntype ButtonProps = {\n  color?: ColorType;\n  size?: SizeType;\n  outline?: boolean;\n  padding?: PaddingType;\n  fullWidth?: boolean;\n  disabled?: boolean;\n  onClick?: () => void;\n};\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  color = ColorType.Blue,\n  size = 'medium',\n  padding = 'medium',\n  outline = false,\n  fullWidth = false,\n  ...rest\n}) => {\n  return (\n    <StyledButton\n      color={color}\n      size={size}\n      padding={padding}\n      outline={outline}\n      fullWidth={fullWidth}\n      {...rest}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import { keyframes } from 'styled-components';\n\nexport const Bounce = keyframes`\nfrom {transform: translateY(0px);}\nto{transform: translateY(-15px);}\n`;\n\nexport const Opacity = keyframes`\n  from {opacity: 0;}\n  to {opacity: 1;}\n`;\n\nexport const FromLeft = keyframes`\nfrom {transform: translateX(-200%);}\nto{transform: translateX(0%);}\n`;\n\nexport const FromRight = keyframes`\nfrom {transform: translateX(80%); opacity: 0}\nto{transform: translateX(0%); opacity: 1}\n`;\n\nexport const FromTop = keyframes`\nfrom {transform: translateY(-200%);}\nto{transform: translateY(0%);}\n`;\n\nexport const FromBottom = keyframes`\nfrom {transform: translateY(200%);}\nto{transform: translateY(0%);}\n`;\n\nexport const scaleUp = keyframes` \n  from { opacity: 0; -webkit-transform: scale(.8); }\n  `;\n\nexport const Shake1 = keyframes`\n  0% { transform: translate(2px, 2px) rotate(0deg); }\n  1.78571% { transform: translate(-2px, -3px) rotate(-1deg); }\n  3.57143% { transform: translate(-4px, 0px) rotate(1deg); }\n  4.35714% { transform: translate(4px, 3px) rotate(0deg); }\n  6.14286% { transform: translate(2px, -2px) rotate(1deg); }\n  7.92857% { transform: translate(-1px, 2px) rotate(-1deg); }\n  9.71429% { transform: translate(-3px, 1px) rotate(0deg); }\n  10.8224% { transform: translate(-2px, -2px) rotate(1deg); }\n  11.2354% { transform: translate(0px, 0px) rotate(-2deg); }\n  100% { transform: translate(2px, 2px) rotate(0deg); }\n`;\n\nexport const Shake2 = keyframes`\n  0% { transform: translate(2px, 2px) rotate(0deg); }\n  26.78571% { transform: translate(-2px, -3px) rotate(-1deg); }\n  27.57143% { transform: translate(-4px, 0px) rotate(1deg); }\n  29.35714% { transform: translate(4px, 3px) rotate(0deg); }\n  31.14286% { transform: translate(2px, -2px) rotate(1deg); }\n  32.92857% { transform: translate(-1px, 2px) rotate(-1deg); }\n  34.71429% { transform: translate(-3px, 1px) rotate(0deg); }\n  36.8224% { transform: translate(-2px, -2px) rotate(1deg); }\n  38.2354% { transform: translate(0px, 0px) rotate(-2deg); }\n  100% { transform: translate(2px, 2px) rotate(0deg); }\n`;\n\nexport const Shake3 = keyframes`\n  0% { transform: translate(2px, 2px) rotate(0deg); }\n  51.78571% { transform: translate(-2px, -3px) rotate(-1deg); }\n  53.57143% { transform: translate(-4px, 0px) rotate(1deg); }\n  54.35714% { transform: translate(4px, 3px) rotate(0deg); }\n  55.14286% { transform: translate(2px, -2px) rotate(1deg); }\n  57.92857% { transform: translate(-1px, 2px) rotate(-1deg); }\n  59.71429% { transform: translate(-3px, 1px) rotate(0deg); }\n  61.8224% { transform: translate(-2px, -2px) rotate(1deg); }\n  62.2354% { transform: translate(0px, 0px) rotate(-2deg); }\n  100% { transform: translate(2px, 2px) rotate(0deg); }\n`;\n\nexport const Shake4 = keyframes`\n  0% { transform: translate(2px, 2px) rotate(0deg); }\n  76.78571% { transform: translate(-2px, -3px) rotate(-1deg); }\n  77.57143% { transform: translate(-4px, 0px) rotate(1deg); }\n  78.35714% { transform: translate(5px, 3px) rotate(0deg); }\n  79.14286% { transform: translate(1px, -2px) rotate(1deg); }\n  81.92857% { transform: translate(-2px, 2px) rotate(-1deg); }\n  82.71429% { transform: translate(-1px, 1px) rotate(0deg); }\n  83.8224% { transform: translate(0px, -2px) rotate(1deg); }\n  85.2354% { transform: translate(0px, 0px) rotate(-2deg); }\n  100% { transform: translate(2px, 2px) rotate(0deg); }\n`;\n","import { DefaultTheme } from 'styled-components';\nimport { palette } from './colors';\n\nexport interface Theme extends DefaultTheme {\n  palette: Record<string, string>;\n}\n\nconst defaultTheme: Theme = { palette };\n\nexport default defaultTheme;\n","import styled, { css } from 'styled-components';\r\nimport Button from 'components/Button';\r\nimport { Bounce } from 'styles/animations';\r\nimport defaultTheme, { Theme } from 'styles/theme';\r\n\r\nexport const PointText = styled.span`\r\n  font-weight: 800;\r\n  color: ${defaultTheme.palette.blue};\r\n`;\r\nexport const Container = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-size: cover;\r\n`;\r\nexport const Title = styled.div`\r\n  font-size: 5rem;\r\n  color: ${defaultTheme.palette.blue};\r\n  font-family: 'Yj', sans-serif;\r\n`;\r\nexport const SubTitle = styled.div`\r\n  font-size: 1.2rem;\r\n  font-family: 'Yspot', sans-serif;\r\n  font-size: 2.2rem;\r\n  text-align: center;\r\n  margin: 1rem 0 5rem 0;\r\n`;\r\nexport const BounceButton = styled(Button)`\r\n  animation: ${Bounce} 0.7s infinite alternate;\r\n`;\r\n\r\nexport const DivBase = styled.div`\r\n  width: 80%;\r\n  height: 80%;\r\n  margin-top: 3rem;\r\n  margin-bottom: 8.5rem;\r\n`;\r\nexport const ContentTitle = styled.div`\r\n  height: 3rem;\r\n  font-family: 'Yspot';\r\n  font-size: 2.4rem;\r\n  text-align: center;\r\n`;\r\nexport const Content = styled.div`\r\n  width: 100%;\r\n  height: calc(100% - 10rem);\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n`;\r\nexport const ExplainBox = styled.div`\r\n  font-size: 1.4rem;\r\n  overflow: auto;\r\n  min-width: 80%;\r\n  max-width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 1.4rem 1.2rem;\r\n  animation-duration: 2.5s;\r\n  text-align: center;\r\n`;\r\nexport const Img = styled.img`\r\n  height: 90%;\r\n`;\r\nexport const FlexDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n`;\r\n\r\nexport const ConversationBox = styled.div`\r\n  ${({ theme }) => {\r\n    const Lg = (theme as Theme).palette.lightGray;\r\n    const Mg = (theme as Theme).palette.midGray;\r\n    return css`\r\n      background-color: ${Lg};\r\n      box-shadow: 5px 5px 7px ${Mg};\r\n    `;\r\n  }}\r\n  border-radius: 1.5rem;\r\n  overflow: auto;\r\n  max-width: 45%;\r\n  max-height: 100%;\r\n  animation-duration: 2.5s;\r\n  margin-left: 3rem;\r\n`;\r\n","import { lighten, darken } from 'polished';\nimport styled, { css } from 'styled-components';\nimport { Theme } from '../styles/theme';\n\nconst ImgBtn = styled.button`\n  border: 0;\n  outline: 0;\n  cursor: pointer;\n  background-color: transparent;\n  font-size: 2.25rem;\n\n  ${({ theme }) => {\n    const selected = (theme as Theme).palette.midGray;\n    return css`\n      color: ${selected};\n      &:hover {\n        color: ${darken(0.1, selected)};\n      }\n      &:active {\n        color: ${lighten(0.1, selected)};\n      }\n      &:disabled {\n        color: ${lighten(0.4, selected)};\n        cursor: not-allowed;\n      }\n    `;\n  }}\n`;\n\nexport default ImgBtn;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { FaHome as Home, FaArrowLeft as Back } from 'react-icons/fa';\nimport { MdReplay } from 'react-icons/md';\nimport { FromRight } from '../styles/animations';\nimport AppContext from '../App/context';\nimport ImageButton from './ImageButton';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  animation: ${FromRight} 0.4s ease-out both;\n  position: relative;\n`;\n\nconst ButtonTopLeft = styled.div`\n  position: absolute;\n  top: 1.5rem;\n  left: 1.5rem;\n`;\n\nconst ButtonTopRight = styled.div`\n  position: absolute;\n  top: 1.5rem;\n  right: 1.5rem;\n  display: flex;\n  justify-content: flex-end;\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\n\nconst Origin = styled.div`\n  position: absolute;\n  right: 1rem;\n  bottom: 1rem;\n  font-size: 0.6rem;\n`;\ntype BasePageProps = {\n  cover?: boolean;\n};\n\nconst BasePage: React.FC<BasePageProps> = ({ children, cover }) => {\n  const { goToHome, goToPrev, closeTab } = useContext(AppContext);\n  const isClosableTab = window.opener !== null;\n  return (\n    <Container>\n      {children}\n      {!cover && (\n        <ButtonTopLeft>\n          <ImageButton onClick={goToPrev}>\n            <Back />\n          </ImageButton>\n        </ButtonTopLeft>\n      )}\n      <ButtonTopRight>\n        {!cover && (\n          <ImageButton onClick={goToHome}>\n            <MdReplay />\n          </ImageButton>\n        )}\n        {isClosableTab && (\n          <ImageButton onClick={closeTab}>\n            <Home />\n          </ImageButton>\n        )}\n      </ButtonTopRight>\n      <Origin>© 2021. 05. DataDriven. All rights reserved.</Origin>\n    </Container>\n  );\n};\n\nexport default BasePage;\n","import React, { useContext } from 'react';\nimport AppContext from 'App/context';\nimport {\n  Container,\n  Title,\n  SubTitle,\n  BounceButton,\n} from 'components/BaseStyles';\nimport BasePage from 'components/BasePage';\n\nconst Cover: React.FC = () => {\n  const { goToNext } = useContext(AppContext);\n  return (\n    <BasePage cover>\n      <Container>\n        <Title>데이터 정리하기</Title>\n        <SubTitle>\n          유사한 특성을 지닌 데이터를 묶는 클러스터링 기법의 이해\n        </SubTitle>\n        <BounceButton size=\"xxlarge\" padding=\"large\" onClick={goToNext}>\n          시작하기\n        </BounceButton>\n      </Container>\n    </BasePage>\n  );\n};\n\nexport default Cover;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport AppContext from '../App/context';\nimport Button from './Button';\n\nconst Div = styled.div`\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  bottom: 0;\n  padding: 1.5rem 0;\n  width: 100%;\n`;\n\ntype ButtonGroupProps = {\n  isOpenNextPage?: boolean;\n  lastPage?: boolean;\n  buttonText?: string;\n  callbackNext?: () => void;\n};\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  isOpenNextPage = true,\n  callbackNext,\n  lastPage,\n  buttonText = '다음',\n}) => {\n  const { goToHome, goToNext } = useContext(AppContext);\n  return (\n    <Div>\n      {lastPage ? (\n        <Button\n          size=\"xlarge\"\n          onClick={() => {\n            if (callbackNext) {\n              callbackNext();\n            }\n            setTimeout(goToHome, 3000);\n          }}\n          disabled={!isOpenNextPage}\n        >\n          설문 제출 후 처음으로\n        </Button>\n      ) : (\n        <Button\n          size=\"xlarge\"\n          padding=\"longWidth\"\n          onClick={() => {\n            if (callbackNext) {\n              callbackNext();\n            }\n            goToNext();\n          }}\n          disabled={!isOpenNextPage}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Div>\n  );\n};\n\nexport default ButtonGroup;\n","import { PolygonType, PolygonSizeType } from 'components/Polygon';\nimport { ColorType } from 'styles/colors';\n\ntype PolygonProps = {\n  id: number;\n  type: PolygonType;\n  size: PolygonSizeType;\n  color: ColorType;\n  cluster: number;\n};\n\nexport const clusters = [0, 1, 2, 3];\n\nexport const polygons: PolygonProps[] = [\n  {\n    id: 0,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.S,\n    color: ColorType.Pink,\n    cluster: clusters[0],\n  },\n  {\n    id: 1,\n    type: PolygonType.Star,\n    size: PolygonSizeType.S,\n    color: ColorType.Green,\n    cluster: clusters[1],\n  },\n  {\n    id: 2,\n    type: PolygonType.Square,\n    size: PolygonSizeType.M,\n    color: ColorType.Purple,\n    cluster: clusters[2],\n  },\n  {\n    id: 3,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.M,\n    color: ColorType.Purple,\n    cluster: clusters[2],\n  },\n  {\n    id: 4,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.M,\n    color: ColorType.Green,\n    cluster: clusters[2],\n  },\n  {\n    id: 5,\n    type: PolygonType.Square,\n    size: PolygonSizeType.L,\n    color: ColorType.Green,\n    cluster: clusters[1],\n  },\n  {\n    id: 6,\n    type: PolygonType.Square,\n    size: PolygonSizeType.L,\n    color: ColorType.Pink,\n    cluster: clusters[3],\n  },\n  {\n    id: 7,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.L,\n    color: ColorType.Pink,\n    cluster: clusters[3],\n  },\n  {\n    id: 8,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.L,\n    color: ColorType.Purple,\n    cluster: clusters[2],\n  },\n  {\n    id: 9,\n    type: PolygonType.Star,\n    size: PolygonSizeType.M,\n    color: ColorType.Pink,\n    cluster: clusters[0],\n  },\n  {\n    id: 10,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.M,\n    color: ColorType.Green,\n    cluster: clusters[2],\n  },\n  {\n    id: 11,\n    type: PolygonType.Square,\n    size: PolygonSizeType.S,\n    color: ColorType.Pink,\n    cluster: clusters[3],\n  },\n  {\n    id: 12,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.M,\n    color: ColorType.Pink,\n    cluster: clusters[2],\n  },\n  {\n    id: 13,\n    type: PolygonType.Star,\n    size: PolygonSizeType.L,\n    color: ColorType.Green,\n    cluster: clusters[0],\n  },\n  {\n    id: 14,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.L,\n    color: ColorType.Yellow,\n    cluster: clusters[3],\n  },\n  {\n    id: 15,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.L,\n    color: ColorType.Purple,\n    cluster: clusters[0],\n  },\n  {\n    id: 16,\n    type: PolygonType.Square,\n    size: PolygonSizeType.S,\n    color: ColorType.Green,\n    cluster: clusters[1],\n  },\n  {\n    id: 17,\n    type: PolygonType.Star,\n    size: PolygonSizeType.S,\n    color: ColorType.Pink,\n    cluster: clusters[0],\n  },\n  {\n    id: 18,\n    type: PolygonType.Star,\n    size: PolygonSizeType.L,\n    color: ColorType.Purple,\n    cluster: clusters[3],\n  },\n  {\n    id: 19,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.M,\n    color: ColorType.Pink,\n    cluster: clusters[3],\n  },\n  {\n    id: 20,\n    type: PolygonType.Star,\n    size: PolygonSizeType.M,\n    color: ColorType.Green,\n    cluster: clusters[0],\n  },\n  {\n    id: 21,\n    type: PolygonType.Star,\n    size: PolygonSizeType.L,\n    color: ColorType.Pink,\n    cluster: clusters[3],\n  },\n  {\n    id: 22,\n    type: PolygonType.Circle,\n    size: PolygonSizeType.S,\n    color: ColorType.Purple,\n    cluster: clusters[2],\n  },\n  {\n    id: 23,\n    type: PolygonType.Diamond,\n    size: PolygonSizeType.L,\n    color: ColorType.Green,\n    cluster: clusters[3],\n  },\n];\n\nexport type GroupByFieldType = 'type' | 'size' | 'color' | 'cluster';\nconst groupBy = (data: PolygonProps[], field: GroupByFieldType) =>\n  data.reduce<Record<string, number[]>>(\n    (prev, current) => ({\n      ...prev,\n      [current[field]]: [...(prev[current[field]] || []), current.id],\n    }),\n    {},\n  );\n\nexport const polygonsGroupByCluster = groupBy(polygons, 'cluster');\nexport const polygonsGroupBySize = groupBy(polygons, 'size');\nexport const polygonsGroupByColor = groupBy(polygons, 'color');\nexport const polygonsGroupByType = groupBy(polygons, 'type');\n\nexport const getClusterGroup: (\n  data: number[],\n  by: GroupByFieldType,\n) => Record<string, number[]> = (data, by) =>\n  groupBy(\n    data.map((polygonId) => polygons[polygonId]),\n    by,\n  );\n\nexport const getMaxLengthArray: (data: number[][]) => number[] = (data) =>\n  data.reduce(\n    (prev, current) => (prev.length >= current.length ? prev : current),\n    [],\n  );\n\nexport const pointViews: { title: string; groupBy: GroupByFieldType }[] = [\n  {\n    title: '크기',\n    groupBy: 'size',\n  },\n  {\n    title: '컬러',\n    groupBy: 'color',\n  },\n  {\n    title: '모양',\n    groupBy: 'type',\n  },\n];\n\nexport const getScores: (\n  groups: number[][],\n) => {\n  cluster: number;\n  groupScores: Record<GroupByFieldType, number[]>;\n  pointSum: number;\n  score: number;\n}[] = (groups) =>\n  groups.map((group, index) => {\n    const groupScores = pointViews.reduce(\n      (prev, current) => ({\n        ...prev,\n        [current.groupBy]: getMaxLengthArray(\n          Object.values(getClusterGroup(group, current.groupBy)),\n        ),\n      }),\n      {} as Record<GroupByFieldType, number[]>,\n    );\n    const pointSum = Object.values(groupScores)\n      .map((polygonIds) => polygonIds.length)\n      .reduce((prev, current) => prev + current, 0);\n    const score = pointSum / group.length;\n    return {\n      cluster: index,\n      groupScores,\n      pointSum,\n      score: Number.isNaN(score) ? 0 : score,\n    };\n  });\n\nexport const scores = getScores(\n  clusters.map((cluster) => polygonsGroupByCluster[cluster]),\n);\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useDrop } from 'react-dnd';\nimport styled, { css } from 'styled-components';\nimport AppContext, {\n  basketSize,\n  centerBasketSize,\n  GroupType,\n} from 'App/context';\nimport { polygons } from 'App/datas';\nimport { ColorType } from 'styles/colors';\nimport { Theme } from 'styles/theme';\nimport Polygon, { ItemTypes } from './Polygon';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50vw;\n  height: 50vh;\n\n  /* 점선처리 */\n  text-align: center;\n  line-height: 100px;\n  background: linear-gradient(to right, #fff 50%, rgba(255, 255, 255, 0) 0%),\n    linear-gradient(#c9c9c9 50%, rgba(255, 255, 255, 0) 0%),\n    linear-gradient(to right, #c9c9c9 50%, rgba(255, 255, 255, 0) 0%),\n    linear-gradient(#c9c9c9 0%, rgba(255, 255, 255, 0) 0%);\n  background-position: top, right, bottom, left;\n  background-repeat: repeat-x, repeat-y;\n  background-size: 30px 1px, 1px 30px;\n`;\n\nconst GridContainer = styled.div`\n  position: relative;\n  width: fit-content;\n  height: fit-content;\n`;\n\nconst Grid = styled.div<{ disabled?: boolean }>`\n  padding: 10px;\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 10px;\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      background: rgba(255, 0, 0, 0.1);\n    `}\n`;\n\nconst Block = styled.div`\n  width: 3vw;\n  height: 3vw;\n`;\n\nconst Overlay = styled.div<{ colorType: ColorType }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.2;\n  z-index: 1;\n  ${({ colorType, theme }) => {\n    const color = (theme as Theme).palette[colorType];\n    return css`\n      background: ${color};\n    `;\n  }};\n`;\n\nconst Basket: React.FC<{\n  groupType: GroupType;\n}> = ({ groupType }) => {\n  const {\n    state: { groups },\n    moveGroup,\n  } = useContext(AppContext);\n  const [isFull, setFull] = useState(false);\n  const group = groups[groupType];\n\n  useEffect(() => {\n    if (!isFull && group.length >= basketSize) {\n      setFull(true);\n    } else if (isFull && group.length < basketSize) {\n      setFull(false);\n    }\n  }, [isFull, group]);\n\n  const [{ isOver, canDrop }, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.PolygonItem,\n      canDrop: ({ from }) => {\n        if (from === groupType) return false;\n        if (isFull) return false;\n        return true;\n      },\n      drop: ({ polygonId, from }: { polygonId: number; from: GroupType }) =>\n        moveGroup(polygonId, from, groupType),\n      collect: (monitor) => ({\n        isOver: !!monitor.isOver(),\n        canDrop: !!monitor.canDrop(),\n      }),\n    }),\n    [isFull],\n  );\n\n  return (\n    <Container ref={drop}>\n      <GridContainer>\n        <Grid disabled={isOver && !canDrop}>\n          {Array.from(Array(basketSize).keys()).map((index) => {\n            const polygon = polygons[group[index]];\n            if (polygon !== undefined) {\n              const { id: key, ...rest } = polygon;\n              return <Polygon key={key} id={key} from={groupType} {...rest} />;\n            }\n            return <Block key={centerBasketSize + index} />;\n          })}\n        </Grid>\n        {isOver && canDrop && <Overlay colorType={ColorType.Blue} />}\n      </GridContainer>\n      {isOver && canDrop && <Overlay colorType={ColorType.Blue} />}\n      {isOver && !canDrop && <Overlay colorType={ColorType.Pink} />}\n    </Container>\n  );\n};\n\nexport default Basket;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport AppContext, { centerBasketSize, GroupType } from 'App/context';\nimport { polygons } from 'App/datas';\nimport Polygon from './Polygon';\n\nconst Grid = styled.div`\n  position: absolute;\n  background: #f2f2f2;\n  border-radius: 1rem;\n  padding: 1rem;\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-gap: 5px;\n  z-index: 999;\n`;\n\nconst Block = styled.div`\n  width: 3vw;\n  height: 3vw;\n`;\n\nconst CenterBasket: React.FC = () => {\n  const {\n    state: { groups },\n  } = useContext(AppContext);\n  const groupType = GroupType.Center;\n  const group = groups[groupType];\n\n  return (\n    <Grid>\n      {Array.from(Array(centerBasketSize).keys()).map((index) => {\n        const polygon = polygons[group[index]];\n        if (polygon !== undefined) {\n          const { id: key, ...rest } = polygon;\n          return <Polygon key={key} id={key} from={groupType} {...rest} />;\n        }\n        return <Block key={centerBasketSize + index} />;\n      })}\n    </Grid>\n  );\n};\n\nexport default CenterBasket;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport TouchBackend from 'react-dnd-touch-backend';\nimport {\n  DndProvider,\n  TouchTransition,\n  MouseTransition,\n} from 'react-dnd-multi-backend';\nimport { GroupType } from 'App/context';\nimport Basket from './Basket';\nimport CenterBasket from './CenterBasket';\n\nexport const HTML5toTouch = {\n  backends: [\n    {\n      id: 'html5',\n      backend: HTML5Backend,\n      transition: MouseTransition,\n    },\n    {\n      id: 'touch',\n      backend: TouchBackend,\n      options: { enableMouseEvents: true },\n      preview: true,\n      transition: TouchTransition,\n    },\n  ],\n};\n\nconst NameDiv = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50vw;\n  height: 12vh;\n  font-weight: 800;\n  z-index: -1;\n  font-size: 3rem;\n  color: #e0e0e0;\n  bottom: 0;\n`;\n\nconst DndBoard: React.FC = () => (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  <DndProvider options={HTML5toTouch as any}>\n    <CenterBasket />\n    <div\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n      }}\n    >\n      <Basket groupType={GroupType.Group1} />\n      <NameDiv>그룹1</NameDiv>\n    </div>\n    <div\n      style={{\n        position: 'absolute',\n        top: 0,\n        right: 0,\n      }}\n    >\n      <Basket groupType={GroupType.Group2} />\n      <NameDiv>그룹2</NameDiv>\n    </div>\n    <div\n      style={{\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n      }}\n    >\n      <Basket groupType={GroupType.Group3} />\n      <NameDiv>그룹3</NameDiv>\n    </div>\n    <div\n      style={{\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n      }}\n    >\n      <Basket groupType={GroupType.Group4} />\n      <NameDiv>그룹4</NameDiv>\n    </div>\n  </DndProvider>\n);\n\nexport default DndBoard;\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ntype Props = {\r\n  title?: string;\r\n  content?: string;\r\n};\r\n\r\nconst Div = styled.div`\r\n  position: absolute;\r\n  bottom: 1.5rem;\r\n  left: 1.5rem;\r\n  box-shadow: 1px 0 8px 0 rgba(0, 0, 0, 0.16);\r\n  background-color: #fbfbfb;\r\n  padding: 1.5rem;\r\n  max-width: 25rem;\r\n  border-radius: 1rem;\r\n  z-index: 1;\r\n`;\r\nconst Title = styled.div`\r\n  font-size: 1.1rem;\r\n  font-weight: 800;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst HelpBox: React.FC<Props> = ({ children, title, content }) => {\r\n  return (\r\n    <Div>\r\n      {title && <Title>{title}</Title>}\r\n      <div>\r\n        {content} {children}\r\n      </div>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport default HelpBox;\r\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport ButtonGroup from 'components/ButtonGroup';\nimport BasePage from 'components/BasePage';\nimport DndBoard from 'components/DndBoard';\nimport AppContext, { centerBasketSize, GroupType } from 'App/context';\nimport HelpBox from 'components/HelpBox';\nimport Button from 'components/Button';\nimport { ColorType } from 'styles/colors';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\nconst TopSection = styled.div`\n  width: fit-content;\n  margin: 0 auto;\n  margin-top: 2rem;\n  position: absolute;\n  top: 0;\n`;\nconst Title = styled.div`\n  font-family: 'Yspot';\n  font-size: 2.4rem;\n  text-align: center;\n  padding-top: 0.8rem;\n`;\nconst Explain = styled.div`\n  font-size: 1.4rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 1rem 0 0.8rem 0;\n  text-align: center;\n`;\n\nconst DragAndDrop: React.FC = () => {\n  const {\n    state: { groups },\n    setState,\n  } = useContext(AppContext);\n  const isEmptyCenter = groups[GroupType.Center].length === 0;\n  const isExistNotAllowedGroup =\n    [1, 2].includes(groups[GroupType.Group1].length) ||\n    [1, 2].includes(groups[GroupType.Group2].length) ||\n    [1, 2].includes(groups[GroupType.Group3].length) ||\n    [1, 2].includes(groups[GroupType.Group4].length);\n  const isOpenNextPage = isEmptyCenter && !isExistNotAllowedGroup;\n  const isFullCenter = groups[GroupType.Center].length === centerBasketSize;\n  return (\n    <BasePage>\n      <Container>\n        <TopSection>\n          <Title>뒤섞인 데이터를 정리해보자</Title>\n          <Explain>\n            4개의 바구니에 블럭을 정리해보자\n            <br />\n            어떻게 나눠야 할까?\n          </Explain>\n        </TopSection>\n        <DndBoard />\n        {isExistNotAllowedGroup && (\n          <HelpBox content=\"한 그룹에 3개 이상의 도형이 있도록 데이터를 정리해줘!\" />\n        )}\n        {isFullCenter && (\n          <HelpBox title=\"드래그 해서 다른 그룹으로 이동해봐!\">\n            <div>점선으로 구분된 4개의 영역이 각 그룹이야.</div>\n            <div>모든 그룹을 다 활용하지 않아도 분류할 수 있어.</div>\n            <div>한 그룹에 최대 12개의 도형을 넣을 수 있어.</div>\n            <div style={{ marginTop: '10px' }}>\n              <Button\n                color={ColorType.MidGray}\n                onClick={() => {\n                  const centerArr = [\n                    ...groups[GroupType.Center].sort(() => 0.5 - Math.random()),\n                  ];\n                  const newGroups: number[][] = [[], [], [], []];\n                  while (centerArr.length > 0) {\n                    const pickedGroupIdx = Math.floor(\n                      Math.random() * newGroups.length,\n                    );\n                    newGroups[pickedGroupIdx] = [\n                      ...newGroups[pickedGroupIdx],\n                      ...centerArr.splice(0, 1),\n                    ];\n                  }\n                  setState((prevState) => ({\n                    ...prevState,\n                    groups: {\n                      [GroupType.Center]: [],\n                      [GroupType.Group1]: newGroups[0],\n                      [GroupType.Group2]: newGroups[1],\n                      [GroupType.Group3]: newGroups[2],\n                      [GroupType.Group4]: newGroups[3],\n                    },\n                  }));\n                }}\n              >\n                자동으로 랜덤 분류하기\n              </Button>\n            </div>\n          </HelpBox>\n        )}\n        <ButtonGroup isOpenNextPage={isOpenNextPage} />\n      </Container>\n    </BasePage>\n  );\n};\n\nexport default DragAndDrop;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  position: relative;\n`;\n\nexport default Container;\n","import styled from 'styled-components';\n\nconst ContentTitle = styled.div`\n  height: 3rem;\n  font-family: 'Yspot';\n  font-size: 2.4rem;\n  text-align: center;\n`;\n\nexport default ContentTitle;\n","import React, { useState } from 'react';\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport dotenv from 'dotenv';\nimport styled, { css } from 'styled-components';\nimport { FaRegSmile as Smile, FaRegFrown as Sad } from 'react-icons/fa';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport moment from 'moment';\nimport BasePage from '../components/BasePage';\nimport ButtonGroup from '../components/ButtonGroup';\nimport Container from '../components/Container';\nimport ContentTitle from '../components/ContentTitle';\n\ntype FormType = {\n  age: string;\n  rating: string;\n};\n\ndotenv.config();\n\nconst SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID || '';\nconst SHEET_ID = process.env.REACT_APP_SHEET_ID || '';\nconst CLIENT_EMAIL = process.env.REACT_APP_CLIENT_EMAIL || '';\nconst PRIVATE_KEY =\n  process.env.REACT_APP_PRIVATE_KEY?.replace(/\\\\n/g, '\\n') || '';\n\nconst doc = new GoogleSpreadsheet(SPREADSHEET_ID);\nconst appendSpreadsheet = async (row: FormType) => {\n  try {\n    await doc.useServiceAccountAuth({\n      client_email: CLIENT_EMAIL,\n      private_key: PRIVATE_KEY,\n    });\n    // loads document properties and worksheets\n    await doc.loadInfo();\n\n    const sheet = doc.sheetsById[SHEET_ID];\n    const now = new Date();\n    await sheet.addRow({\n      ...row,\n      date: moment(now).format('YYYY-MM-DD HH:mm:ss'),\n    });\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Error: ', e);\n  }\n};\n\nconst ageOptions = [\n  '초1~2',\n  '초3~4',\n  '초5~6',\n  '중1',\n  '중2',\n  '중3',\n  '고1',\n  '고2',\n  '고3',\n  '대학생',\n  '기타',\n];\nconst ratingOptions = [\n  { value: '좋아요', icon: <Smile /> },\n  { value: '별로네요', icon: <Sad /> },\n];\nconst defaultValues = {\n  age: '',\n  rating: '',\n};\n\nconst List = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Subtitle = styled.h3`\n  font-size: 1.6rem;\n`;\n\nconst Wrapper = styled.div`\n  width: 50%;\n  margin-top: 3.5rem;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n`;\n\nconst CustomDivBase = styled.div`\n  width: 100%;\n  height: 100%;\n  margin-top: 2rem;\n  margin-bottom: 8.5rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nconst Option = styled.span<{ active?: boolean }>`\n  color: black;\n  cursor: pointer;\n  text-align: center;\n`;\n\nconst AgeOption = styled(Option)`\n  padding: 1em;\n  font-size: 1.2rem;\n  margin: 0.5em;\n  background: #dadada;\n  border-radius: 30px;\n  width: 120px;\n\n  ${(props) =>\n    props.active &&\n    css`\n      color: white;\n      background: gray;\n    `}\n`;\n\nconst RatingOption = styled(Option)`\n  & + & {\n    margin-left: 4rem;\n  }\n`;\n\nconst useStyles = makeStyles({\n  cookieAlert: {\n    '& .MuiAlert-icon': {\n      fontSize: '2rem',\n    },\n    '& .MuiAlert-message': {\n      fontSize: '1.5rem',\n    },\n  },\n});\n\nconst Survey: React.FC = () => {\n  const [state, setState] = useState<FormType>(defaultValues);\n  const [open, setOpen] = useState(false);\n  const handleClick = () => {\n    setOpen(true);\n  };\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  const classes = useStyles();\n  const { age, rating } = state;\n  return (\n    <BasePage cover>\n      <Container>\n        <CustomDivBase>\n          <ContentTitle>만족도 평가</ContentTitle>\n          <Wrapper>\n            <Subtitle>이용 연령대를 선택해주세요</Subtitle>\n            <Grid>\n              {ageOptions.map((option) => (\n                <AgeOption\n                  key={option}\n                  active={age === option}\n                  onClick={() =>\n                    setState((prevState) => ({\n                      ...prevState,\n                      age: option,\n                    }))\n                  }\n                >\n                  {option}\n                </AgeOption>\n              ))}\n            </Grid>\n          </Wrapper>\n          <Wrapper>\n            <Subtitle>콘텐츠를 평가해주세요</Subtitle>\n            <List>\n              {ratingOptions.map((option) => {\n                const { value, icon } = option;\n                return (\n                  <RatingOption\n                    key={value}\n                    onClick={() =>\n                      setState((prevState) => ({\n                        ...prevState,\n                        rating: value,\n                      }))\n                    }\n                  >\n                    <div\n                      style={{\n                        fontSize: '3rem',\n                        height: '3rem',\n                        width: '3rem',\n                        borderRadius: '50%',\n                        margin: 'auto',\n                        marginBottom: '10px',\n                        background: rating === value ? 'yellow' : 'initial',\n                      }}\n                    >\n                      {icon}\n                    </div>\n                    {value}\n                  </RatingOption>\n                );\n              })}\n            </List>\n          </Wrapper>\n        </CustomDivBase>\n      </Container>\n      {!open && (\n        <ButtonGroup\n          lastPage\n          callbackNext={() => {\n            handleClick();\n            appendSpreadsheet(state);\n          }}\n          isOpenNextPage={!!(age && rating)}\n        />\n      )}\n      <Snackbar open={open} onClose={handleClose}>\n        <Alert\n          className={classes.cookieAlert}\n          severity=\"success\"\n          variant=\"filled\"\n        >\n          설문이 반영되었습니다. 소중한 의견 감사합니다.\n        </Alert>\n      </Snackbar>\n    </BasePage>\n  );\n};\n\nexport default Survey;\n","import React, { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport ChatBot from 'assets/images/chat_robot.png';\r\nimport { Opacity } from 'styles/animations';\r\nimport messenger from 'assets/sounds/messenger.mp3';\r\n\r\nconst audio = new Audio(messenger);\r\n\r\nenum MessageStatus {\r\n  HIDE,\r\n  APPREARING,\r\n  SHOW,\r\n}\r\n\r\ntype ChatBubbleContainerProps = {\r\n  isFirstPersonView?: boolean;\r\n  messageStatus: MessageStatus;\r\n};\r\n\r\nconst AvatarWrapper = styled.span`\r\n  min-width: 4rem;\r\n  min-height: 4rem;\r\n  max-width: 4rem;\r\n  max-height: 4rem;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Avatar = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst ChatMessage = styled.div`\r\n  padding: 1em;\r\n  font-size: 1.1rem;\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  max-width: 85%;\r\n  text-align: left;\r\n  height: 100%;\r\n  line-height: 1.6rem;\r\n`;\r\n\r\nconst switchMessageStatus = (status: MessageStatus) => {\r\n  switch (status) {\r\n    case MessageStatus.HIDE:\r\n      return css`\r\n        visibility: hidden;\r\n      `;\r\n\r\n    case MessageStatus.APPREARING:\r\n      return css`\r\n        animation: ${Opacity} 1s ease-out both;\r\n      `;\r\n\r\n    case MessageStatus.SHOW:\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  return css``;\r\n};\r\n\r\nconst ChatBubbleContainer = styled.div<ChatBubbleContainerProps>`\r\n  padding: 1rem;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 80%;\r\n\r\n  ${({ isFirstPersonView }) => css`\r\n    align-self: ${isFirstPersonView ? 'flex-end' : 'flex-start'};\r\n    flex-direction: ${isFirstPersonView ? 'row-reverse' : 'row'};\r\n  `}\r\n\r\n  ${({ messageStatus }) => switchMessageStatus(messageStatus)}\r\n\r\n  & + & {\r\n    margin-top: 0.25rem;\r\n  }\r\n`;\r\n\r\ntype ChatBubbleProps = {\r\n  imgSrc: string;\r\n  text: string;\r\n} & ChatBubbleContainerProps;\r\n\r\nconst ChatBubble: React.FC<ChatBubbleProps> = ({\r\n  imgSrc,\r\n  text,\r\n  isFirstPersonView,\r\n  messageStatus,\r\n}) => {\r\n  return (\r\n    <ChatBubbleContainer\r\n      isFirstPersonView={isFirstPersonView}\r\n      messageStatus={messageStatus}\r\n    >\r\n      <AvatarWrapper>\r\n        <Avatar src={imgSrc} />\r\n      </AvatarWrapper>\r\n      <ChatMessage>{text}</ChatMessage>\r\n    </ChatBubbleContainer>\r\n  );\r\n};\r\n\r\ntype ChatUIContainerProps = {\r\n  backgroundImgSrc?: string;\r\n};\r\n\r\nconst ChatUIContainer = styled.div<ChatUIContainerProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 1rem;\r\n\r\n  ${(props) =>\r\n    props.backgroundImgSrc &&\r\n    css`\r\n      background-image: url(${props.backgroundImgSrc});\r\n    `}\r\n`;\r\n\r\ntype UserType = {\r\n  userId: number;\r\n  isFirstPersonView?: boolean;\r\n  imgSrc?: string;\r\n};\r\n\r\ntype MessageType = {\r\n  id: number;\r\n  userId: number;\r\n  text: string;\r\n};\r\n\r\ntype ChatUIProps = {\r\n  users: UserType[];\r\n  messages: MessageType[];\r\n  animation?: boolean;\r\n  setOpenNextPage?: React.Dispatch<React.SetStateAction<boolean>>;\r\n} & ChatUIContainerProps;\r\n\r\nconst ChatUI: React.FC<ChatUIProps> = ({\r\n  users,\r\n  messages,\r\n  backgroundImgSrc,\r\n  animation,\r\n  setOpenNextPage,\r\n}) => {\r\n  const [animationStep, setAnimationStep] = useState(0);\r\n  useEffect(() => {\r\n    if (animation) {\r\n      if (animationStep < messages.length - 1) {\r\n        if (animationStep === 0) {\r\n          audio.play();\r\n        }\r\n        setTimeout(() => {\r\n          setAnimationStep((step) => step + 1);\r\n        }, 1500);\r\n      } else if (setOpenNextPage && animationStep === messages.length - 1) {\r\n        setOpenNextPage(true);\r\n      }\r\n    }\r\n  }, [animation, animationStep, messages, setOpenNextPage]);\r\n  const meUserId =\r\n    users.find((user) => user.isFirstPersonView)?.userId || users[0].userId;\r\n  const userMap = new Map(users.map((user) => [user.userId, user]));\r\n  return (\r\n    <ChatUIContainer backgroundImgSrc={backgroundImgSrc}>\r\n      {messages.map((message) => {\r\n        const user = userMap.get(message.userId);\r\n        const src = user?.imgSrc || ChatBot;\r\n        const isFirstPersonView = user?.userId === meUserId;\r\n        let status = MessageStatus.SHOW;\r\n        if (animation) {\r\n          if (message.id === animationStep) {\r\n            status = MessageStatus.APPREARING;\r\n          } else if (message.id > animationStep) {\r\n            status = MessageStatus.HIDE;\r\n          }\r\n        }\r\n        return (\r\n          <ChatBubble\r\n            key={message.id}\r\n            imgSrc={src}\r\n            text={message.text}\r\n            isFirstPersonView={isFirstPersonView}\r\n            messageStatus={status}\r\n          />\r\n        );\r\n      })}\r\n    </ChatUIContainer>\r\n  );\r\n};\r\n\r\nexport default ChatUI;\r\n","import styled from 'styled-components';\r\nimport defaultTheme from 'styles/theme';\r\n\r\nconst PointText = styled.span`\r\n  font-weight: 800;\r\n  color: ${defaultTheme.palette.blue};\r\n`;\r\n\r\nexport default PointText;\r\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { DndProvider } from 'react-dnd-multi-backend';\nimport { basketSize, centerBasketSize } from 'App/context';\nimport { polygons } from 'App/datas';\nimport { Theme } from 'styles/theme';\nimport { ColorType } from 'styles/colors';\nimport Polygon from './Polygon';\nimport { HTML5toTouch } from './DndBoard';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 0.5vw;\n  padding: 0.5vw;\n  margin: auto;\n  width: fit-content;\n  height: fit-content;\n  ${({ theme }) => css`\n    background: ${(theme as Theme).palette[ColorType.LightGray]};\n  `}\n`;\n\nconst Block = styled.div`\n  width: 3vw;\n  height: 3vw;\n`;\n\nconst ReadOnlyBasket: React.FC<{ group: number[]; showBorders?: number[] }> = ({\n  group,\n  showBorders = [],\n}) => {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    <DndProvider options={HTML5toTouch as any}>\n      <Grid>\n        {Array.from(Array(basketSize).keys()).map((index) => {\n          const polygon = polygons[group[index]];\n          if (polygon !== undefined) {\n            const { id: key, ...rest } = polygon;\n            return (\n              <Polygon\n                key={key}\n                id={key}\n                canDrag={false}\n                showBorder={showBorders.includes(key)}\n                {...rest}\n              />\n            );\n          }\n          return <Block key={centerBasketSize + index} />;\n        })}\n      </Grid>\n    </DndProvider>\n  );\n};\n\nexport default ReadOnlyBasket;\n","import React, { useContext } from 'react';\r\nimport PointText from 'components/PointText';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { polygonsGroupBySize } from 'App/datas';\r\nimport styled from 'styled-components';\r\nimport AppContext, { GroupType } from 'App/context';\r\n\r\nconst GridByTwoColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 0.5vw;\r\n  max-width: 40vw;\r\n  width: fit-content;\r\n  height: fit-content;\r\n`;\r\n\r\nconst CompareContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .my {\r\n    margin-left: 10vw;\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst CompareBySize: React.FC = () => {\r\n  const groupsResultByComputer = Object.entries(polygonsGroupBySize);\r\n  const {\r\n    state: { groups },\r\n  } = useContext(AppContext);\r\n  const groupsResultByMe = Object.entries(groups).filter(\r\n    ([key]) => ((key as unknown) as string) !== GroupType.Center.toString(),\r\n  );\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>데이터 분석 관점 비교 ①</ContentTitle>\r\n          <ExplainBox>\r\n            <PointText>크기</PointText>로 나눌 수 있겠네. 나의 정리와\r\n            비교해볼까?\r\n          </ExplainBox>\r\n          <Content>\r\n            <CompareContainer>\r\n              <div>\r\n                <h2>크기로 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByComputer.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n              <div className=\"my\">\r\n                <h2>나의 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByMe.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n            </CompareContainer>\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default CompareBySize;\r\n","import React, { useContext } from 'react';\r\nimport PointText from 'components/PointText';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { polygonsGroupByColor } from 'App/datas';\r\nimport styled from 'styled-components';\r\nimport AppContext, { GroupType } from 'App/context';\r\n\r\nconst GridByTwoColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 0.5vw;\r\n  max-width: 40vw;\r\n  width: fit-content;\r\n  height: fit-content;\r\n`;\r\n\r\nconst CompareContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .my {\r\n    margin-left: 10vw;\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst CompareByColor: React.FC = () => {\r\n  const groupsResultByComputer = Object.entries(polygonsGroupByColor);\r\n  const {\r\n    state: { groups },\r\n  } = useContext(AppContext);\r\n  const groupsResultByMe = Object.entries(groups).filter(\r\n    ([key]) => ((key as unknown) as string) !== GroupType.Center.toString(),\r\n  );\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>데이터 분석 관점 비교 ②</ContentTitle>\r\n          <ExplainBox>\r\n            <PointText>색깔</PointText>로도 나눌 수 있겠네. 너는 어떤 기준으로\r\n            나눈 거야?\r\n          </ExplainBox>\r\n          <Content>\r\n            <CompareContainer>\r\n              <div>\r\n                <h2>색깔로 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByComputer.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n              <div className=\"my\">\r\n                <h2>나의 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByMe.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n            </CompareContainer>\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default CompareByColor;\r\n","import React, { useContext } from 'react';\r\nimport PointText from 'components/PointText';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { polygonsGroupByType } from 'App/datas';\r\nimport styled from 'styled-components';\r\nimport AppContext, { GroupType } from 'App/context';\r\n\r\nconst GridByTwoColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 0.5vw;\r\n  max-width: 40vw;\r\n  width: fit-content;\r\n  height: fit-content;\r\n`;\r\n\r\nconst CompareContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .my {\r\n    margin-left: 10vw;\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst CompareByShape: React.FC = () => {\r\n  const groupsResultByComputer = Object.entries(polygonsGroupByType);\r\n  const {\r\n    state: { groups },\r\n  } = useContext(AppContext);\r\n  const groupsResultByMe = Object.entries(groups).filter(\r\n    ([key]) => ((key as unknown) as string) !== GroupType.Center.toString(),\r\n  );\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>데이터 분석 관점 비교 ③</ContentTitle>\r\n          <ExplainBox>\r\n            <PointText>모양</PointText>으로도 나눌 수 있었어. 3가지 관점을 모두\r\n            고려해서 정리하려면 어떻게 해야할까?\r\n          </ExplainBox>\r\n          <Content>\r\n            <CompareContainer>\r\n              <div>\r\n                <h2>모양으로 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByComputer.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n              <div className=\"my\">\r\n                <h2>나의 정리</h2>\r\n                <GridByTwoColumn>\r\n                  {groupsResultByMe.map(([key, group]) => (\r\n                    <ReadOnlyBasket key={key} group={group} />\r\n                  ))}\r\n                </GridByTwoColumn>\r\n              </div>\r\n            </CompareContainer>\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default CompareByShape;\r\n","export default __webpack_public_path__ + \"static/media/dice.dc2d5760.gif\";","import React from 'react';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport DiceImg from 'assets/images/dice.gif';\r\n\r\nconst General: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>다양한 특성을 고려한 종합분석</ContentTitle>\r\n          <ExplainBox>\r\n            크기, 색깔, 모양에 따른 분류는 한 가지 기준으로만 정리된 건데,\r\n            <br />세 가지 기준을 동시에 고려하여 데이터를 정리하면 어떨까?\r\n          </ExplainBox>\r\n          <Content>\r\n            <img style={{ height: '100%' }} src={DiceImg} alt=\"\" />\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default General;\r\n","export default __webpack_public_path__ + \"static/media/dimension.2e474c81.gif\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PointText from 'components/PointText';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport DimensionImg from 'assets/images/dimension.gif';\r\n\r\nconst Img = styled.img`\r\n  margin-top: 2.5rem;\r\n`;\r\n\r\nconst ExperienceDone: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>데이터 정리 체험 완료!</ContentTitle>\r\n          <ExplainBox>\r\n            <div>\r\n              지금까지 잘 따라왔어! 이처럼 데이터의 다양한 특성을 종합하여,\r\n              <br />\r\n              기계가 유사한 데이터끼리 묶는 것을{' '}\r\n              <PointText>클러스터링</PointText>\r\n              이라고 해. <br />\r\n              다음 장부터 클러스터링 분석기법에 대해 같이 알아보자.\r\n            </div>\r\n          </ExplainBox>\r\n          <Content>\r\n            <Img src={DimensionImg} alt=\"\" />\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default ExperienceDone;\r\n","import React, { useContext } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport AppContext, { GroupType } from 'App/context';\r\nimport { polygonsGroupByCluster, scores, getScores } from 'App/datas';\r\n\r\nconst StyledContent = styled(Content)`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: auto;\r\n`;\r\n\r\nconst GridByTwoColumn = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 0.5vw;\r\n  max-width: 40vw;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  margin: auto;\r\n`;\r\n\r\nconst OverlayWrapper = styled.div`\r\n  position: relative;\r\n  height: fit-content;\r\n  margin: auto;\r\n`;\r\n\r\nconst MiddleOverlayBadge = styled.div<{\r\n  color: string;\r\n  background: string;\r\n}>`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  & > div {\r\n    ${({ color, background }) => css`\r\n      background: ${background};\r\n      color: ${color};\r\n    `}\r\n    margin: auto;\r\n    border-radius: 1rem;\r\n    padding: 0.5em 1em;\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst ResultCompare: React.FC = () => {\r\n  const {\r\n    state: { groups },\r\n  } = useContext(AppContext);\r\n  const groupsResultByMe = Object.entries(groups).filter(\r\n    ([key]) => ((key as unknown) as string) !== GroupType.Center.toString(),\r\n  );\r\n  const groupsResultByComputer = Object.entries(polygonsGroupByCluster);\r\n  const validGroups = Object.values(groups).slice(1);\r\n  const myScores = getScores(validGroups);\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>나의 정리와 잘 된 정리 비교</ContentTitle>\r\n          <ExplainBox>\r\n            이제 내가 한 정리와 잘 된 정리를 비교해보자. 정리가 잘 된 그룹이\r\n            점수가 더 높네.\r\n            <br />\r\n            이처럼 여러 관점을 동시에 봐야, 좋은 정리라고 할 수 있어!\r\n          </ExplainBox>\r\n          <StyledContent>\r\n            <OverlayWrapper>\r\n              <GridByTwoColumn>\r\n                {groupsResultByMe.map(([key, group], index) => (\r\n                  <OverlayWrapper key={key}>\r\n                    <ReadOnlyBasket group={group} />\r\n                    <MiddleOverlayBadge color=\"black\" background=\"white\">\r\n                      <div>{myScores[index].score.toFixed(2)}</div>\r\n                    </MiddleOverlayBadge>\r\n                  </OverlayWrapper>\r\n                ))}\r\n              </GridByTwoColumn>\r\n              <MiddleOverlayBadge color=\"white\" background=\"#717578\">\r\n                <div>\r\n                  나의 정리{' '}\r\n                  {Object.values(myScores)\r\n                    .reduce((prev, current) => prev + current.score, 0)\r\n                    .toFixed(2)}\r\n                </div>\r\n              </MiddleOverlayBadge>\r\n            </OverlayWrapper>\r\n            <OverlayWrapper>\r\n              <GridByTwoColumn>\r\n                {groupsResultByComputer.map(([key, group], index) => (\r\n                  <OverlayWrapper key={key}>\r\n                    <ReadOnlyBasket group={group} />\r\n                    <MiddleOverlayBadge color=\"black\" background=\"white\">\r\n                      <div>{scores[index].score.toFixed(2)}</div>\r\n                    </MiddleOverlayBadge>\r\n                  </OverlayWrapper>\r\n                ))}\r\n              </GridByTwoColumn>\r\n              <MiddleOverlayBadge color=\"white\" background=\"#717578\">\r\n                <div>\r\n                  잘 된 정리{' '}\r\n                  {Object.values(scores)\r\n                    .reduce((prev, current) => prev + current.score, 0)\r\n                    .toFixed(2)}\r\n                </div>\r\n              </MiddleOverlayBadge>\r\n            </OverlayWrapper>\r\n          </StyledContent>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default ResultCompare;\r\n","export default __webpack_public_path__ + \"static/media/book_robot.8d8037f3.png\";","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport AppContext from 'App/context';\r\nimport BasePage from 'components/BasePage';\r\nimport { Container } from 'components/BaseStyles';\r\nimport { Bounce } from 'styles/animations';\r\nimport BookRobot from 'assets/images/book_robot.png';\r\n\r\nconst Title = styled.div`\r\n  font-size: 4rem;\r\n  color: #fff;\r\n  font-family: 'Yj', sans-serif;\r\n`;\r\nconst Button = styled.button`\r\n  padding: 1rem 5rem;\r\n  color: #fff;\r\n  background-color: #165be5;\r\n  outline: 0;\r\n  border: 0;\r\n  font-size: 1.8rem;\r\n  font-family: 'Yspot', sans-serif;\r\n  border-radius: 1rem;\r\n  cursor: pointer;\r\n  animation: ${Bounce} 1s infinite alternate;\r\n`;\r\nconst ButtonDiv = styled.div`\r\n  position: absolute;\r\n  bottom: 2rem;\r\n`;\r\nconst Content = styled.div`\r\n  color: #fff;\r\n  font-size: 1.6rem;\r\n  text-align: center;\r\n  margin-top: 3.5rem;\r\n  font-family: 'Score';\r\n  line-height: 2.2rem;\r\n`;\r\nconst ImgDiv = styled.div`\r\n  position: absolute;\r\n  right: 5rem;\r\n  bottom: 5rem;\r\n`;\r\nconst Img = styled.img`\r\n  width: 20rem;\r\n`;\r\n\r\nconst Compare1: React.FC = () => {\r\n  const { goToNext } = useContext(AppContext);\r\n  return (\r\n    <BasePage>\r\n      <Container style={{ backgroundColor: '#3AA9EA' }}>\r\n        <Title>클러스터링 기법 알아보기</Title>\r\n        <Content>\r\n          데이터를 직접 정리해보니 어때? <br />\r\n          나의 직관과 실제 분석된 결과의 차이는 어디서 발생하는 것일까?\r\n          <br />\r\n          클러스터링 기법은 무엇이며, 사용하면 어떤 점이 좋은지 함께 알아보자!\r\n        </Content>\r\n        <ImgDiv>\r\n          <Img src={BookRobot} alt=\"\" />\r\n        </ImgDiv>\r\n        <ButtonDiv>\r\n          <Button onClick={goToNext}>알아보기</Button>\r\n        </ButtonDiv>\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default Compare1;\r\n","export default __webpack_public_path__ + \"static/media/crowd.f39f1c77.gif\";","import React from 'react';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n  Img,\r\n  FlexDiv,\r\n} from 'components/BaseStyles';\r\nimport HelpBox from 'components/HelpBox';\r\nimport CrowdImg from 'assets/images/crowd.gif';\r\n\r\nconst WhatIs: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>클러스터링 분석이란?</ContentTitle>\r\n          <ExplainBox>\r\n            클러스터링 기법은 여러 기준을 가지고 기계가 한 번에 정리하는\r\n            기준이야.\r\n            <br />\r\n            주어진 데이터들을 특성에 따라 유사한 것끼리 묶어, 각 유형별 특징을\r\n            분석하는 기법이지.\r\n          </ExplainBox>\r\n          <Content>\r\n            <FlexDiv style={{ height: '100%' }}>\r\n              <Img src={CrowdImg} alt=\"\" />\r\n            </FlexDiv>\r\n          </Content>\r\n          <HelpBox title=\"클러스터링 분석의 가장 대표적인 예\" content=\"\">\r\n            <div>다양한 유형의 고객을 같은 유형끼리</div>\r\n            <div>묶어주는 고객 세분화가 있어!</div>\r\n          </HelpBox>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default WhatIs;\r\n","export default __webpack_public_path__ + \"static/media/messy.09f7abb3.gif\";","export default __webpack_public_path__ + \"static/media/chat_robot.a1c5fb46.png\";","export default __webpack_public_path__ + \"static/media/chat_bini.52414c03.png\";","export default __webpack_public_path__ + \"static/media/messenger.6eca1857.mp3\";","import React, { useState } from 'react';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n  FlexDiv,\r\n  Img,\r\n  ConversationBox,\r\n} from 'components/BaseStyles';\r\nimport HelpBox from 'components/HelpBox';\r\nimport MessyImg from 'assets/images/messy.gif';\r\nimport ChatBot from 'assets/images/chat_robot.png';\r\nimport ChatBini from 'assets/images/chat_bini.png';\r\nimport ChatUI from 'components/ChatUI';\r\n\r\nconst Purpose: React.FC = () => {\r\n  const [isOpenNextPage, setOpenNextPage] = useState(false);\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>클러스터링 분석의 목적</ContentTitle>\r\n          <ExplainBox>\r\n            그렇다면 왜 클러스터링 분석을 하는 것일까? <br />\r\n            카테고리별로 개체를 잘 분류하면 관리 편의성과 효율성이 좋아지기\r\n            때문이야!\r\n          </ExplainBox>\r\n          <Content>\r\n            <FlexDiv>\r\n              <Img src={MessyImg} alt=\"\" />\r\n              <ConversationBox>\r\n                <ChatUI\r\n                  users={[\r\n                    { userId: 0, imgSrc: ChatBini },\r\n                    { userId: 1, imgSrc: ChatBot, isFirstPersonView: true },\r\n                  ]}\r\n                  messages={[\r\n                    {\r\n                      id: 0,\r\n                      userId: 0,\r\n                      text:\r\n                        '카테고리 분류를 잘 하면 어떤 경우에 관리가 편해질까?',\r\n                    },\r\n                    {\r\n                      id: 1,\r\n                      userId: 1,\r\n                      text:\r\n                        '물건들을 정리할 때 비슷한 물건끼리 정리해놓으면 나중에 물건을 찾을 때 쉽게 찾을 수 있겠지?',\r\n                    },\r\n                    {\r\n                      id: 2,\r\n                      userId: 1,\r\n                      text:\r\n                        '마찬가지로 만약 쇼핑몰에서 고객 정보를 비슷한 유형끼리 잘 분류해놓는다면, 고객에게 상품을 추천하거나 서비스를 제공할 때 비슷한 유형의 고객 정보를 활용하여 적절한 서비스를 제공할 수 있을 거야!',\r\n                    },\r\n                  ]}\r\n                  animation\r\n                  setOpenNextPage={setOpenNextPage}\r\n                />\r\n              </ConversationBox>\r\n            </FlexDiv>\r\n          </Content>\r\n          <HelpBox title=\"클러스터링 분석의 장점\" content=\"\">\r\n            <div>평균의 함정에 빠지지 않을 수 있도록 도와줘!</div>\r\n            <div>평균의 함정이란 어떤 집단의 평균이</div>\r\n            <div>집단에 속한 각 객체의 특성을 반영해주지</div>\r\n            <div>못하는 현상을 말해.</div>\r\n          </HelpBox>\r\n        </DivBase>\r\n        <ButtonGroup isOpenNextPage={isOpenNextPage} />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default Purpose;\r\n","export default __webpack_public_path__ + \"static/media/k_means_video.6dbee57d.mp4\";","import React from 'react';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport HelpBox from 'components/HelpBox';\r\nimport KmeansVideo from 'assets/sounds/k_means_video.mp4';\r\n\r\nconst Understanding: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>클러스터링 기법의 이해</ContentTitle>\r\n          <ExplainBox>\r\n            가장 많이 쓰이는 클러스터링 기법은 K-means 알고리즘이야.\r\n            <br />\r\n            분류하고자 하는 그룹 K개의 점을 찍고 그 점을 기반으로 정리하는\r\n            기술이지.\r\n          </ExplainBox>\r\n          <Content\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <video loop autoPlay controls style={{ height: '90%' }}>\r\n              <source src={KmeansVideo} type=\"video/mp4\" />\r\n              <track src=\"\" kind=\"captions\" label=\"captions\" />\r\n            </video>\r\n          </Content>\r\n          <HelpBox title=\"[심화] K-means 클러스터링이란?\" content=\"\">\r\n            <div>&#34;관련성이 높은 데이터 사이의 거리는 가깝다&#34;가</div>\r\n            <div>클러스터링 분석의 핵심사고야.</div>\r\n            <div>거리가 가까운지를 알려면, 기준점이 필요하겠지?</div>\r\n            <div>이 중심을 찾아주는 게 K-means 기법이야.</div>\r\n            <div>컴퓨터가 수만 번 데이터들 간의 거리를 계산하여,</div>\r\n            <div>가장 거리가 짧은 중심점의 위치를 찾아</div>\r\n            <div> K의 개수만큼 그룹을 생성해주지.</div>\r\n          </HelpBox>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default Understanding;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Circle = styled.div`\r\n  border-radius: 50%;\r\n  padding: 1rem;\r\n  border: 1px solid gray;\r\n  background-color: #fff;\r\n  height: 8rem;\r\n  width: 8rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: 'Yspot';\r\n  font-size: 1.4rem;\r\n`;\r\nexport const Explain = styled.div`\r\n  margin-left: 2rem;\r\n  line-height: 1.8rem;\r\n  text-align: left;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  font-size: 1rem;\r\n`;\r\nexport const ColorBox = styled.div`\r\n  border: 1px solid #dcdcdc;\r\n  box-shadow: 5px 5px 5px #dcdcdc;\r\n  border-radius: 1rem;\r\n  width: 13rem;\r\n  height: 16rem;\r\n  &:not(:last-child) {\r\n    margin-right: 1rem;\r\n  }\r\n`;\r\nexport const Flex = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 1rem 0;\r\n  padding: 1rem;\r\n  border-radius: 1rem;\r\n  background-color: #ececec;\r\n  width: 70rem;\r\n`;\r\nexport const GroupDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\ntype Props = {\r\n  bgColor: string;\r\n};\r\nexport const GroupTitle = styled.div<Props>`\r\n  ${(props) =>\r\n    css`\r\n      background-color: ${props.bgColor};\r\n    `}\r\n  border-top-left-radius: 0.95rem;\r\n  border-top-right-radius: 0.95rem;\r\n  font-family: 'Yj';\r\n  padding: 0.5rem;\r\n  color: #fff;\r\n  height: 3rem;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport const InBoxTitle = styled.div`\r\n  font-weight: 800;\r\n`;\r\nexport const InBoxContent = styled.div`\r\n  font-size: 1rem;\r\n  color: gray;\r\n`;\r\nexport const FlexBothCenter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  padding: 2rem 1rem;\r\n  height: 13rem;\r\n`;\r\n","import React from 'react';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport {\r\n  Circle,\r\n  Explain,\r\n  ColorBox,\r\n  Flex,\r\n  GroupDiv,\r\n  GroupTitle,\r\n  InBoxTitle,\r\n  FlexBothCenter,\r\n  InBoxContent,\r\n} from 'components/EtcStyles';\r\nimport HelpBox from 'components/HelpBox';\r\n\r\nconst Datas = [\r\n  {\r\n    id: 0,\r\n    group: '그룹1',\r\n    title1: '화장하기 시작한',\r\n    title2: '중고등학생',\r\n    age: '평균연령 17세',\r\n    score: '활동지수 0.64',\r\n    color: '#339BA3',\r\n  },\r\n  {\r\n    id: 0,\r\n    group: '그룹2',\r\n    title1: '서비스 주 이용자',\r\n    title2: '고등학생, 20대 초반',\r\n    age: '평균연령 20세',\r\n    score: '활동지수 169',\r\n    color: '#46BF83',\r\n  },\r\n  {\r\n    id: 0,\r\n    group: '그룹3',\r\n    title1: 'vvip, 활동대장',\r\n    title2: '20대',\r\n    age: '평균연령 22세',\r\n    score: '활동지수 1766',\r\n    color: '#BBE867',\r\n  },\r\n  {\r\n    id: 0,\r\n    group: '그룹4',\r\n    title1: '리뷰를 보며 배우는',\r\n    title2: '고등학생, 20대 초반',\r\n    age: '평균연령 23세',\r\n    score: '활동지수 0.04',\r\n    color: '#F6E98B',\r\n  },\r\n  {\r\n    id: 0,\r\n    group: '그룹5',\r\n    title1: '이벤트에만 관심',\r\n    title2: '조용한, 30대 이상',\r\n    age: '평균연령 33세',\r\n    score: '활동지수 0.09',\r\n    color: '#FDA961',\r\n  },\r\n];\r\n\r\nconst UseCase1: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>클러스터링 분석 활용 사례 ①</ContentTitle>\r\n          <ExplainBox>\r\n            클러스터링 기법은 고객군을 정확히 알고\r\n            <br />\r\n            이를 활용한 추천 시스템 개발, 마케팅 등에 자주 활용되고 있어.\r\n          </ExplainBox>\r\n          <Content\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Flex>\r\n              <Circle>\r\n                화장품\r\n                <br /> 리뷰 앱\r\n              </Circle>\r\n              <Explain>\r\n                <div>\r\n                  서비스소개 : 화장품 구입 후기를 작성·공유하고 자신에게 맞는\r\n                  화장품을 추천받아 구입할 수 있는 플랫폼\r\n                </div>\r\n                <div>\r\n                  보유데이터 : 고객의 연령, 피부타입, 피부고민, 고객의 커뮤니티\r\n                  활동, 구매정보\r\n                </div>\r\n                <div>\r\n                  니즈 : 고객을 세분화하고 자세히 파악하여, 구매를 높이기 위한\r\n                  맞춤 정보를 제공하고 싶다!\r\n                </div>\r\n              </Explain>\r\n            </Flex>\r\n            <GroupDiv>\r\n              {Datas.map((data) => (\r\n                <ColorBox key={data.color}>\r\n                  <GroupTitle bgColor={data.color}>{data.group}</GroupTitle>\r\n                  <FlexBothCenter>\r\n                    <div>\r\n                      <InBoxTitle>{data.title1}</InBoxTitle>\r\n                      <InBoxTitle>{data.title2}</InBoxTitle>\r\n                    </div>\r\n                    <div>\r\n                      <InBoxContent>{data.age}</InBoxContent>\r\n                      <InBoxContent>{data.score}</InBoxContent>\r\n                    </div>\r\n                  </FlexBothCenter>\r\n                </ColorBox>\r\n              ))}\r\n            </GroupDiv>\r\n          </Content>\r\n          <HelpBox\r\n            title=\"각 집단의 특성을 파악하려면?\"\r\n            content=\"클러스터링 기법을 통해 분류된 데이터를 보고 그 의미를 해석할 수 있는 경험과 직관력이 필요해!\"\r\n          />\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default UseCase1;\r\n","export default __webpack_public_path__ + \"static/media/graph_all.6518c0ad.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport BasePage from 'components/BasePage';\r\nimport PointText from 'components/PointText';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n  FlexDiv,\r\n  Img,\r\n} from 'components/BaseStyles';\r\nimport Graph1 from 'assets/images/graph_all.png';\r\n\r\nconst ImgDiv = styled.div`\r\n  width: 28rem;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  img {\r\n    width: 24rem;\r\n  }\r\n`;\r\n\r\nconst UseCase2: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>클러스터링 분석 활용 사례 ②</ContentTitle>\r\n          <ExplainBox>\r\n            클러스터링 분석은 시장을 세분화하는데 가장 널리 쓰이는 방법 중\r\n            하나야.\r\n            <br />\r\n            공공정책 부문에서도 맞춤형 정책을 펼치기 위해 활용되고 있어.\r\n          </ExplainBox>\r\n          <Content style={{ marginTop: '2.5rem' }}>\r\n            <FlexDiv>\r\n              <ImgDiv>\r\n                <Img src={Graph1} alt=\"\" />\r\n              </ImgDiv>\r\n              <div style={{ marginLeft: '2rem' }}>\r\n                <div>\r\n                  <PointText>출처 : 성남시 행복지수 연구 2020</PointText>\r\n                </div>\r\n                <div>\r\n                  <br />\r\n                  성남시 청소년 1,500명을 대상으로 실시한 설문조사에서 <br />\r\n                  행복 관련 응답 유사성에 따라 5개의 집단으로 분류했어. <br />\r\n                  <br />\r\n                  1,500명은 5개의 집단으로 분류되었고 <br />\r\n                  행복 취약 집단은 어떤 특성을 갖고 있는지 분석하여\r\n                  <br />\r\n                  오늘도 내일도 행복한 성남시 청소년을 위한\r\n                  <br />\r\n                  정책을 기획하고 집행하는데 사용되었어!\r\n                </div>\r\n              </div>\r\n            </FlexDiv>\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default UseCase2;\r\n","export default __webpack_public_path__ + \"static/media/smile.342e818f.gif\";","import React from 'react';\r\nimport BasePage from 'components/BasePage';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport SmileImg from 'assets/images/smile.gif';\r\n\r\nconst UnderstandingComplete: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>데이터 정리 - 클러스터링 기법이해 완료</ContentTitle>\r\n          <ExplainBox>\r\n            정리하면, 클러스터링은 유사한 특성을 지닌 데이터를 묶는 데이터 분석\r\n            방법 중 하나야!\r\n            <br />\r\n            클러스터링은 방대한 데이터에서 우리가 알지 못했던 집단의 특성을\r\n            파악하는데 도움을 줘!\r\n          </ExplainBox>\r\n          <Content style={{ marginTop: '2.5rem' }}>\r\n            <img src={SmileImg} alt=\"\" style={{ height: '100%' }} />\r\n          </Content>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default UnderstandingComplete;\r\n","import React from 'react';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n  PointText,\r\n} from 'components/BaseStyles';\r\nimport styled from 'styled-components';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { polygonsGroupByCluster } from 'App/datas';\r\n\r\nconst StyledContent = styled(Content)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  width: 60%;\r\n  height: fit-content;\r\n  margin: auto;\r\n  margin-top: 8rem;\r\n`;\r\n\r\nconst Question = styled.div`\r\n  font-size: 1.3rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst pointViews = [{ title: '크기' }, { title: '컬러' }, { title: '모양' }];\r\n\r\nconst AnalyticsProgress: React.FC = () => {\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>종합 분석 과정</ContentTitle>\r\n          <ExplainBox>\r\n            종합 정리된 그룹을 예시로\r\n            <br />\r\n            어떻게 세 가지 관점에서 동시에 고려하는지 알아보자!\r\n          </ExplainBox>\r\n          <StyledContent>\r\n            {pointViews.map((pointView) => (\r\n              <div key={pointView.title}>\r\n                <Question>\r\n                  같은 <PointText>{pointView.title}</PointText>는 최대 몇 개야?\r\n                </Question>\r\n                <ReadOnlyBasket group={polygonsGroupByCluster[0]} />\r\n              </div>\r\n            ))}\r\n          </StyledContent>\r\n        </DivBase>\r\n        <ButtonGroup buttonText=\"정답 확인\" />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default AnalyticsProgress;\r\n","import React from 'react';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n  PointText,\r\n} from 'components/BaseStyles';\r\nimport styled, { css } from 'styled-components';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { pointViews, polygonsGroupByCluster, scores } from 'App/datas';\r\nimport { Theme } from 'styles/theme';\r\nimport { ColorType } from 'styles/colors';\r\n\r\nconst StyledContent = styled(Content)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  width: 60%;\r\n  height: fit-content;\r\n  margin: auto;\r\n  margin-top: 7rem;\r\n`;\r\n\r\nconst Question = styled.div`\r\n  font-size: 1.3rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\nconst Txt = styled.div`\r\n  font-size: 1.1rem;\r\n  height: 2rem;\r\n`;\r\n\r\nconst Highlighting = styled.span`\r\n  ${({ theme }) => css`\r\n    color: ${(theme as Theme).palette[ColorType.Blue]};\r\n  `}\r\n`;\r\n\r\nconst AnalyticsProgress: React.FC = () => {\r\n  const { groupScores, pointSum, score } = scores[2];\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>종합 분석 과정</ContentTitle>\r\n          <ExplainBox>\r\n            데이터가 잘 정리되었다는 것은 비슷한 것끼리 묶여 있다는 의미야.\r\n            <br />\r\n            그룹 내에 크기, 색깔, 모양 각 관점으로 같은 도형이 몇 번 나타났을까?\r\n          </ExplainBox>\r\n          <StyledContent>\r\n            {pointViews.map((pointView) => {\r\n              const maxLengthPolygonIds = groupScores[pointView.groupBy];\r\n              return (\r\n                <div key={pointView.title}>\r\n                  <Question>\r\n                    같은 <PointText>{pointView.title}</PointText> 도형은 최대{' '}\r\n                    <Highlighting>{maxLengthPolygonIds.length}</Highlighting>개\r\n                  </Question>\r\n                  <ReadOnlyBasket\r\n                    group={polygonsGroupByCluster[2]}\r\n                    showBorders={maxLengthPolygonIds}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </StyledContent>\r\n          <StyledContent\r\n            style={{\r\n              background: '#FAFAFA',\r\n              marginTop: '1rem',\r\n              fontSize: '1rem',\r\n              padding: '1em',\r\n              textAlign: 'center',\r\n              display: 'block',\r\n            }}\r\n          >\r\n            <Txt>\r\n              한 그룹에서 같은 크기는 {groupScores.size.length}개, 같은 색깔은{' '}\r\n              {groupScores.color.length}개, 모양은 {groupScores.type.length}개가\r\n              있어. 모두를 더하면 {pointSum}이(가) 되는구나.\r\n            </Txt>\r\n            <Txt>\r\n              다른 그룹과의 비교를 위해 총 도형 수로 나누기{' '}\r\n              {polygonsGroupByCluster[2].length} 연산을 하니,\r\n            </Txt>\r\n            <Txt>\r\n              첫 번째 그룹에 있는 도형의 유사도 점수는 {score.toFixed(2)} 로\r\n              나오네!\r\n            </Txt>\r\n          </StyledContent>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default AnalyticsProgress;\r\n","import React from 'react';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport styled, { css } from 'styled-components';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport { polygonsGroupByCluster, scores } from 'App/datas';\r\nimport { Theme } from 'styles/theme';\r\nimport { ColorType } from 'styles/colors';\r\n\r\nconst StyledContent = styled(Content)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  width: 80%;\r\n  height: fit-content;\r\n  margin: auto;\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst Highlighting = styled.span`\r\n  ${({ theme }) => css`\r\n    color: ${(theme as Theme).palette[ColorType.Blue]};\r\n  `}\r\n`;\r\n\r\nconst AnalyticsResult: React.FC = () => {\r\n  const totalScore = scores\r\n    .map((scoreInfo) => scoreInfo.score)\r\n    .reduce((prev, current) => prev + current, 0)\r\n    .toFixed(2);\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>종합 분석 결과</ContentTitle>\r\n          <ExplainBox>\r\n            다른 그룹들도 이전 페이지와 동일한 방식으로 계산해봤어.\r\n            <br />\r\n            다양한 기준을 적용해서 4개 그룹을 분석해보니, {totalScore}점이\r\n            나왔네!\r\n            <br />\r\n            그럼 같은 방식으로 나의 정리 결과도 확인해볼까?\r\n          </ExplainBox>\r\n          <StyledContent>\r\n            {scores.map(({ cluster, score }) => {\r\n              return (\r\n                <div key={cluster}>\r\n                  <h2>그룹{cluster + 1}</h2>\r\n                  <ReadOnlyBasket group={polygonsGroupByCluster[cluster]} />\r\n                  <p>{score.toFixed(2)}</p>\r\n                </div>\r\n              );\r\n            })}\r\n          </StyledContent>\r\n          <StyledContent\r\n            style={{\r\n              marginTop: '1rem',\r\n              fontSize: '2rem',\r\n              padding: '1em',\r\n              textAlign: 'center',\r\n              display: 'block',\r\n            }}\r\n          >\r\n            총점 <Highlighting>{totalScore}</Highlighting>\r\n          </StyledContent>\r\n        </DivBase>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default AnalyticsResult;\r\n","import React, { useContext } from 'react';\r\nimport ButtonGroup from 'components/ButtonGroup';\r\nimport BasePage from 'components/BasePage';\r\nimport {\r\n  Container,\r\n  DivBase,\r\n  ContentTitle,\r\n  Content,\r\n  ExplainBox,\r\n} from 'components/BaseStyles';\r\nimport styled from 'styled-components';\r\nimport ReadOnlyBasket from 'components/ReadOnlyBasket';\r\nimport AppContext from 'App/context';\r\nimport HelpBox from 'components/HelpBox';\r\nimport { getScores, pointViews, polygons } from 'App/datas';\r\nimport { palette } from 'styles/colors';\r\nimport { polygonMap } from 'components/Polygon';\r\n\r\nconst StyledContent = styled(Content)`\r\n  position: absolute;\r\n  top: 20%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 80%;\r\n  height: fit-content;\r\n  margin: auto;\r\n  margin-top: 5rem;\r\n`;\r\n\r\nconst Pill = styled.span<{ active: boolean }>`\r\n  color: white;\r\n  border-radius: 1.5rem;\r\n  padding: 0.5em 1.2em;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  background: ${({ active }) => (active ? '#717171' : '#C5C5C5')};\r\n\r\n  & + & {\r\n    margin-left: 2em;\r\n  }\r\n`;\r\n\r\nconst MyAnalyticsResult: React.FC<{ groupId: number }> = ({ groupId }) => {\r\n  const {\r\n    state: { groups },\r\n  } = useContext(AppContext);\r\n  const validGroups = Object.values(groups).slice(1);\r\n  const myScore = getScores(validGroups)[groupId];\r\n  return (\r\n    <BasePage>\r\n      <Container>\r\n        <DivBase>\r\n          <ContentTitle>나의 정리 - 종합 분석 결과</ContentTitle>\r\n          <ExplainBox>\r\n            {groupId === 0 && (\r\n              <>\r\n                내가 정리한 데이터도 각 그룹의 유사도 점수를 같이 확인해볼까?\r\n                <br />\r\n              </>\r\n            )}\r\n            내가 정리한 그룹{groupId + 1}의 데이터 유사도 점수는{' '}\r\n            {myScore.score.toFixed(2)}점이야\r\n          </ExplainBox>\r\n          <StyledContent>\r\n            <div>\r\n              {Array.from(Array(validGroups.length).keys()).map((index) => (\r\n                <Pill key={index} active={index === groupId}>\r\n                  그룹{index + 1}\r\n                </Pill>\r\n              ))}\r\n            </div>\r\n            <div\r\n              style={{\r\n                margin: '4rem auto 0',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n              }}\r\n            >\r\n              <div>\r\n                <ReadOnlyBasket group={validGroups[groupId]} />\r\n              </div>\r\n              <div style={{ marginLeft: '4rem' }}>\r\n                <div>같은 크기, 모양, 색깔은 최대 몇 개일까?</div>\r\n\r\n                <ul style={{ padding: 0 }}>\r\n                  {pointViews.map(({ title, groupBy }) => {\r\n                    const firstOfTargetGroupByField =\r\n                      myScore.groupScores[groupBy][0];\r\n                    const polygon = polygons[firstOfTargetGroupByField];\r\n                    if (!polygon) return null;\r\n\r\n                    let display = null;\r\n                    switch (groupBy) {\r\n                      case 'size': {\r\n                        display = ['(S)', '(M)', '(L)'][polygon.size - 1];\r\n                        break;\r\n                      }\r\n                      case 'color': {\r\n                        display = (\r\n                          <span\r\n                            style={{\r\n                              display: 'inline-block',\r\n                              width: '1.125rem',\r\n                              height: '1.125rem',\r\n                              background: palette[polygon.color],\r\n                            }}\r\n                          />\r\n                        );\r\n                        break;\r\n                      }\r\n                      case 'type': {\r\n                        const Icon = polygonMap.get(polygon.type);\r\n                        if (Icon) {\r\n                          display = <Icon />;\r\n                        }\r\n                        break;\r\n                      }\r\n                      default:\r\n                        break;\r\n                    }\r\n                    return (\r\n                      <li\r\n                        key={title}\r\n                        style={{\r\n                          display: 'flex',\r\n                          justifyContent: 'space-between',\r\n                        }}\r\n                      >\r\n                        &#x2022;{title}\r\n                        <span>\r\n                          {display} {myScore.groupScores[groupBy].length}개\r\n                        </span>\r\n                      </li>\r\n                    );\r\n                  })}\r\n                </ul>\r\n                <hr />\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                  }}\r\n                >\r\n                  크기, 모양, 색깔 대표 값의 합 (A){' '}\r\n                  <span>{myScore.pointSum}</span>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                  }}\r\n                >\r\n                  도형의 총 개수 (B) <span>{validGroups[groupId].length}</span>\r\n                </div>\r\n                <hr />\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                  }}\r\n                >\r\n                  그룹{groupId + 1} 유사도 점수 (A&#xF7;B){' '}\r\n                  <span>{myScore.score.toFixed(2)}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </StyledContent>\r\n        </DivBase>\r\n        <HelpBox title=\"어떻게 이런 결과가 나왔지?\">\r\n          <div>\r\n            도형을 구분할 수 있는 크기, 색깔, 모양에서 가장 많이 나타난 특성이\r\n            몇 번 나타났는지 세어봤어. 그리고 각 그룹에 속한 도형의 총 개수를\r\n            나눠줬어.\r\n          </div>\r\n          <div>\r\n            도형의 개수가 많아질수록 그룹의 점수가 높아진 것을 방지하기 위해\r\n            나눈 것이지!\r\n          </div>\r\n        </HelpBox>\r\n        <ButtonGroup />\r\n      </Container>\r\n    </BasePage>\r\n  );\r\n};\r\n\r\nexport default MyAnalyticsResult;\r\n","import React, { useState } from 'react';\nimport Cover from 'pages/Cover';\nimport DragAndDrop from 'pages/DragAndDrop';\nimport Survey from 'pages/Survey';\nimport CompareBySize from 'pages/CompareBySize';\nimport CompareByColor from 'pages/CompareByColor';\nimport CompareByShape from 'pages/CompareByShape';\nimport General from 'pages/General';\nimport ExperienceDone from 'pages/ExperienceDone';\nimport ResultCompare from 'pages/ResultCompare';\nimport FindOut from 'pages/FindOut';\nimport WhatIs from 'pages/WhatIs';\nimport Purpose from 'pages/Purpose';\nimport Understanding from 'pages/Understanding';\nimport UseCase1 from 'pages/UseCase1';\nimport UseCase2 from 'pages/UseCase2';\nimport UnderstandingComplete from 'pages/UnderstandingComplete';\nimport AnalyticsProgress1 from 'pages/AnalyticsProgress1';\nimport AnalyticsProgress2 from 'pages/AnalyticsProgress2';\nimport AnalyticsResult from 'pages/AnalyticsResult';\nimport MyAnalyticsResult from 'pages/MyAnalyticsResult';\nimport AppContext, {\n  defaultState,\n  GroupType,\n  minPage,\n  StateType,\n} from './context';\n\nconst pages = [\n  <Cover />,\n  <DragAndDrop />,\n  <CompareBySize />,\n  <CompareByColor />,\n  <CompareByShape />,\n  <General />,\n  <AnalyticsProgress1 />,\n  <AnalyticsProgress2 />,\n  <AnalyticsResult />,\n  <MyAnalyticsResult groupId={0} />,\n  <MyAnalyticsResult groupId={1} />,\n  <MyAnalyticsResult groupId={2} />,\n  <MyAnalyticsResult groupId={3} />,\n  <ResultCompare />,\n  <ExperienceDone />,\n  <FindOut />,\n  <WhatIs />,\n  <Purpose />,\n  <Understanding />,\n  <UseCase1 />,\n  <UseCase2 />,\n  <UnderstandingComplete />,\n  ...(navigator.onLine ? [<Survey />] : []),\n];\nconst maxStage = pages.length - 1;\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<StateType>(defaultState);\n  const goToHome = () => setState(defaultState);\n  const handleGoToPage = (addValue: number) => () => {\n    setState((prevState) => {\n      const newStage = prevState.page + addValue;\n      const page =\n        minPage <= newStage && newStage <= maxStage ? newStage : minPage;\n      return {\n        ...prevState,\n        page,\n      };\n    });\n  };\n  const goToPrev = handleGoToPage(-1);\n  const goToNext = handleGoToPage(1);\n  const closeTab = () => window.close();\n  const moveGroup = (id: number, from: GroupType, to: GroupType) => {\n    if (from === to) return;\n\n    setState((prevState) => ({\n      ...prevState,\n      groups: {\n        ...prevState.groups,\n        [from]: prevState.groups[from].filter((polygonId) => polygonId !== id),\n        [to]: prevState.groups[to].concat(id),\n      },\n    }));\n  };\n  return (\n    <div\n      onContextMenu={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <AppContext.Provider\n        value={{\n          state,\n          setState,\n          goToHome,\n          goToPrev,\n          goToNext,\n          closeTab,\n          moveGroup,\n        }}\n      >\n        {pages[state.page]}\n      </AppContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    color: #717578;\n    font-family: 'Score', sans-serif;\n    font-weight: 400;\n    overflow: hidden;\n    padding: 0;\n    margin: 0;\n    font-size: 18px;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport defaultTheme from './styles/theme';\nimport GlobalStyle from './styles/globalStyles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={defaultTheme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}